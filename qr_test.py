# Importing required libraries
import json
import base64
from io import BytesIO
import qrcode
import brotli

def integer_to_base64(integer_value):
    # Converting integer to bytes
    int_bytes = integer_value.to_bytes((integer_value.bit_length() + 7) // 8, byteorder='big')
    # Encoding bytes to base64
    return base64.b64encode(int_bytes).decode()

def compress_and_generate_qr(data):
    print("input data length", len(json.dumps(data).encode()))

    # Transform large integers to base64
    for key in data.keys():
        original_value = data[key]
        data[key] = integer_to_base64(original_value)
        
        # Print for debugging
        print(f"{key}: Original value: {original_value}")
        print(f"{key}: Transformed value: {data[key]}")

    compressed_data = brotli.compress(json.dumps(data).encode())
    
    # Step 2: Base64 encode the compressed data to make it URL-safe
    encoded_data = base64.b64encode(compressed_data).decode()
    
    print("Compressed Data length: ", len(encoded_data))
    
    # Step 3: Generate a QR code from the base64 encoded data

    # this is cute, but it needs a mighty wide terminal window
    if False:
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(encoded_data)
        qr.make(fit=True)
        qr_matrix = qr.get_matrix()
        
        for row in qr_matrix:
            print("".join("##" if cell else "  " for cell in row))
        
    
    qr_image = qrcode.make(encoded_data)

    # prepare io buffer of PNG data
    buffer = BytesIO()
    qr_image.save(buffer)
    buffer.seek(0)
    
    # Assume `buffer` contains your QR code in PNG format as bytes.
    buffer.seek(0)
    png_data = buffer.read()
    base64_png = base64.b64encode(png_data).decode()
    data_url = f"data:image/png;base64,{base64_png}"

    print("Copy this into your browser address bar for a QR code of your vote:", data_url)

    
    buffer.seek(0)
    with open("output_qr.png", "wb") as f:
        f.write(buffer.read())
    
    buffer.seek(0)
    return buffer

def main():
    # Example data
    vote_dict = {
        "alice": 2029069689417096618166379644551652641679313222476683866754099935645157504179285647465877003634247597970170442116282136145139418948949594298614805520029729638167947101127229148896504493433110883165474767032050288432182634801230003474458339160290015587073834634855451283131144822672575396283506886202375368171058923296631039320685000215640904408729855790931413998675812289821017778448248152342058686575418573500047930516486287662478146694755245716563740260255803558526247016157870916559274425471540794074533939305512701911337764677006949303137954733593008939741630759872930902619885117573874023383841785287412305352591458270765450714223948145883939436029519579300468136593706350651250066797264996796633370570435510003972801154455970648128462834144061421630824224075155076031209385500540751855066282970838894839724363848916059042913154532524036154680552418407206282352923726435833837469942660866724181326702843741176317023244078968078963521012674053954911903499813535915157681331961541839746485049073009958747323802635324469836437482808224584655393914978186570131498289905367074014842186074906851746373283481755562098158403411333339989926544239654243740365466329003893668303036041834100805526763093407890179984270643691757527151756637342980886741967471585930886964084726084289481787247795313877006872747935192110637962542902441354000543594055244749857412079903374821091945956426146165103667756873651924430530393893678857567832482035404891322859827323024164058531865201214901826071073532389227858624605504798787348152513755209168359624133965220496159185294874341685035554399910181659843970822406385177932745886878790859951426095019047779452397683832992129840976535607612803379560172536486861865742032353766899104181961021413013744931759719053450897226484787864950059814203219501477152312015605501382391621617415093161188613285012722137124338211770480640,
        "bob": 2168806700020487493618813790643673466963948573093985423682921315757916684627788009539004734086605146256227889282392095551693794724380900456005262408417335869280569751510857448639161285104865998879042999554498194556948131327949326957470477877535134767057782813377002953356672383914241027230851487584075171472804134391833232921382346173437828815292666837296274456376216460523232636513399969129933294178402641125412632824993418685241682899511466852816042661240473707277803025657562088340385030688848280544970978568093141362884720114368397847895003075498275012693100651847978163238634054847242896636825049009600771108226700420908002735759877568835151547932439322959989206193735309255491428671810315539032831532223706211363600303002870604213057859141162974353858663097668580342768881243490525860698812890139175803671986370688908555662229647567713264901744207797275790756799839727770303276875629059166404428320196193682401345571413309036941896383736393704133512444435252171770388866742745355084376543287317336113785229025186028189382457379597444496188978236318882354448784398011925015123266898620191439100742678222767926581682806521894568944301238292958016895877175458656320138366009199833799337405424839479531086692698518231144693691554719765894316784212565564246085714259208710660426566886479852635081799476583073371142028972911260018245222620831841618680422960872615023502419622588605965898150860342813507533153430159180954105987666846412939075202764196771357532409759923060870422584755349883253921693522691370772207473539510397194465344148325690286278163040386582867093080267248469561271791534658217287673954130140493211400847546241928237507836946688301853647678553841616436730886969655387060029308889222094696079224738625494385273340803382373416495266607871962718080371237725364899861286485270652129827543004403652821748174546751733124098096250288716
    }
    
    compress_and_generate_qr(vote_dict)
    

# Simulate calling main if this script is run directly
if __name__ == "__main__":
    size = main()
    size
